services:
  weaviate:
    image: semitechnologies/weaviate:latest
    ports:
      - "8080:8080"
    volumes:
      - ./weaviate-data:/var/lib/weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      CLUSTER_HOSTNAME: 'node1'
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      DEFAULT_VECTORIZER_MODULE: text2vec-transformers
      ENABLE_MODULES: text2vec-transformers
      TRANSFORMERS_INFERENCE_API: "http://t2v-transformers:8080"
      RAFT_BOOTSTRAP_EXPECTED: 1
      DISABLE_TELEMETRY: "false"
      RAFT_BOOTSTRAP_TIMEOUT: 300
    depends_on:
      t2v-transformers:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:8080/v1/.well-known/ready || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 30
      start_period: 30s
    networks:
      - web

  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-paraphrase-multilingual-MiniLM-L12-v2
    ports:
      - "8081:8080"
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:8080/v1/.well-known/ready || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 30
      start_period: 30s
    networks:
      - web

  go-server:
    build:
      context: .
    ports:
      - "3000:3000"
    depends_on:
      weaviate:
        condition: service_healthy
    networks:
      - web

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   depends_on:
  #     - go-server
  #   networks:
  #     - web
  #   command: [ "nginx", "-g", "daemon off;" ]

  openresty:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: openresty
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
    depends_on:
      - go-server
    networks:
      - web
    

  certbot:
    image: certbot/certbot

    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: >
      sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot --email muneet.dhanker@omlogic.com --agree-tos --no-eff-email -d ai.solhapp.com"
    networks:
      - web
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - web

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SERVER_ROOT_URL=https://ai.solhapp.com/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    depends_on:
      - prometheus
    networks:
      - web
  
  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - web

  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail
    volumes:
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock 
      - /tmp:/tmp
      - ./promtail-config.yml:/etc/promtail/promtail.yaml
    command: -config.file=/etc/promtail/promtail.yaml
    networks:
      - web

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - web
    pid: "host"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)'



volumes:
  grafana-data:

networks:
  web:
    driver: bridge
